
stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000272  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c6  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000717  00000000  00000000  00000c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039a  00000000  00000000  0000134d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000159  00000000  00000000  00001b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  78:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_INIT>:
 
void USART_INIT(void) 
{ 
    // This function sets up the microcontroller for serial communication
    // The baud rate, registers, and prescaler value are all set.
    UBRR0H = (uint8_t)(BAUD_PRESCALER>>8); 
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t)(BAUD_PRESCALER); 
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UCSR0B = (1<<RXEN0)|(1<<TXEN0); 
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    UCSR0C = (3<<UCSZ00);  
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  96:	08 95       	ret

00000098 <USART_SEND>:
} 
 
void USART_SEND(unsigned char data)  
{ 
    // This function sends a single character from the ATmega328P to the computer.
    while(!(UCSR0A&(1<<UDRE0))); 
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	95 ff       	sbrs	r25, 5
  a0:	fd cf       	rjmp	.-6      	; 0x9c <USART_SEND+0x4>
    UDR0=data; 
  a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a6:	08 95       	ret

000000a8 <ReadADC>:
 
 
uint16_t ReadADC(uint8_t ADCchannel) 
{ 
    // This function reads and returns the ADC value from a specified input pin
    ADMUX = (ADMUX&0xF0)|(ADCchannel&0x0F); // select ADC channel with safety mask
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	90 81       	ld	r25, Z
  ae:	90 7f       	andi	r25, 0xF0	; 240
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	89 2b       	or	r24, r25
  b4:	80 83       	st	Z, r24
    ADCSRA |= (1<<ADSC);  // single conversion mode
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
    while( ADCSRA & (1<<ADSC));// wait until ADC conversion is complete
  c0:	80 81       	ld	r24, Z
  c2:	86 fd       	sbrc	r24, 6
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <ReadADC+0x18>
    return ADC; 
  c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  ce:	08 95       	ret

000000d0 <main>:

int main(void) 
{
    // set up timer with prescaler = 64 and CTC mode
    count = 0;
    DDRB = 0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	84 b9       	out	0x04, r24	; 4
    ADMUX |= (1<<REFS0); // select Vref=AVcc
  d4:	ec e7       	ldi	r30, 0x7C	; 124
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
    ADCSRA |= (1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);   // set prescaler to 8 and enable ADC
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	83 68       	ori	r24, 0x83	; 131
  e6:	80 83       	st	Z, r24
    USART_INIT();  // Call the USART initialization code
  e8:	0e 94 40 00 	call	0x80	; 0x80 <USART_INIT>
    TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
  ec:	e1 e8       	ldi	r30, 0x81	; 129
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8b 60       	ori	r24, 0x0B	; 11
  f4:	80 83       	st	Z, r24
    TCNT1 = 0;
  f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    while(1) 
    { 
        int temp = ReadADC(0)*10;// read the ADC value and perform conversion to temperature
        OCR1A = temp;
  fe:	0f 2e       	mov	r0, r31
 100:	f8 e8       	ldi	r31, 0x88	; 136
 102:	ef 2e       	mov	r14, r31
 104:	f1 2c       	mov	r15, r1
 106:	f0 2d       	mov	r31, r0
     
        if(TIFR1 & (1<<OCF1A)){
            PORTB = 0x66; //PB1 PB2
 108:	0f 2e       	mov	r0, r31
 10a:	f6 e6       	ldi	r31, 0x66	; 102
 10c:	4f 2e       	mov	r4, r31
 10e:	f0 2d       	mov	r31, r0
            _delay_ms(10);
            PORTB = 0xCC;  //PB2 PB3
 110:	0f 2e       	mov	r0, r31
 112:	fc ec       	ldi	r31, 0xCC	; 204
 114:	5f 2e       	mov	r5, r31
 116:	f0 2d       	mov	r31, r0
            _delay_ms(10);
            PORTB = 0x99;   //PB0 PB3
 118:	0f 2e       	mov	r0, r31
 11a:	f9 e9       	ldi	r31, 0x99	; 153
 11c:	6f 2e       	mov	r6, r31
 11e:	f0 2d       	mov	r31, r0
            _delay_ms(10);
            PORTB = 0x33;  // PB1 PB0
 120:	0f 2e       	mov	r0, r31
 122:	f3 e3       	ldi	r31, 0x33	; 51
 124:	7f 2e       	mov	r7, r31
 126:	f0 2d       	mov	r31, r0
            _delay_ms(10);
             
             
            USART_SEND((temp/10000)%10+48); // send thousand place digit as a character
 128:	0f 2e       	mov	r0, r31
 12a:	f0 e1       	ldi	r31, 0x10	; 16
 12c:	af 2e       	mov	r10, r31
 12e:	f7 e2       	ldi	r31, 0x27	; 39
 130:	bf 2e       	mov	r11, r31
 132:	f0 2d       	mov	r31, r0
 134:	0a e0       	ldi	r16, 0x0A	; 10
 136:	10 e0       	ldi	r17, 0x00	; 0
            USART_SEND((temp/1000)%10+48);  // send huns place digit as a character
 138:	0f 2e       	mov	r0, r31
 13a:	f8 ee       	ldi	r31, 0xE8	; 232
 13c:	cf 2e       	mov	r12, r31
 13e:	f3 e0       	ldi	r31, 0x03	; 3
 140:	df 2e       	mov	r13, r31
 142:	f0 2d       	mov	r31, r0
            USART_SEND((temp/100)%10+48);   // send tens place digit as a character
 144:	0f 2e       	mov	r0, r31
 146:	f4 e6       	ldi	r31, 0x64	; 100
 148:	8f 2e       	mov	r8, r31
 14a:	91 2c       	mov	r9, r1
 14c:	f0 2d       	mov	r31, r0
    USART_INIT();  // Call the USART initialization code
    TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
    TCNT1 = 0;
    while(1) 
    { 
        int temp = ReadADC(0)*10;// read the ADC value and perform conversion to temperature
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 54 00 	call	0xa8	; 0xa8 <ReadADC>
 154:	ec 01       	movw	r28, r24
 156:	cc 0f       	add	r28, r28
 158:	dd 1f       	adc	r29, r29
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	c8 0f       	add	r28, r24
 168:	d9 1f       	adc	r29, r25
        OCR1A = temp;
 16a:	f7 01       	movw	r30, r14
 16c:	d1 83       	std	Z+1, r29	; 0x01
 16e:	c0 83       	st	Z, r28
     
        if(TIFR1 & (1<<OCF1A)){
 170:	b1 9b       	sbis	0x16, 1	; 22
 172:	53 c0       	rjmp	.+166    	; 0x21a <main+0x14a>
            PORTB = 0x66; //PB1 PB2
 174:	45 b8       	out	0x05, r4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f e1       	ldi	r24, 0x1F	; 31
 178:	9e e4       	ldi	r25, 0x4E	; 78
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0xaa>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xb0>
 180:	00 00       	nop
            _delay_ms(10);
            PORTB = 0xCC;  //PB2 PB3
 182:	55 b8       	out	0x05, r5	; 5
 184:	ef e1       	ldi	r30, 0x1F	; 31
 186:	fe e4       	ldi	r31, 0x4E	; 78
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0xb8>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0xbe>
 18e:	00 00       	nop
            _delay_ms(10);
            PORTB = 0x99;   //PB0 PB3
 190:	65 b8       	out	0x05, r6	; 5
 192:	8f e1       	ldi	r24, 0x1F	; 31
 194:	9e e4       	ldi	r25, 0x4E	; 78
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0xc6>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0xcc>
 19c:	00 00       	nop
            _delay_ms(10);
            PORTB = 0x33;  // PB1 PB0
 19e:	75 b8       	out	0x05, r7	; 5
 1a0:	ef e1       	ldi	r30, 0x1F	; 31
 1a2:	fe e4       	ldi	r31, 0x4E	; 78
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0xd4>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0xda>
 1aa:	00 00       	nop
            _delay_ms(10);
             
             
            USART_SEND((temp/10000)%10+48); // send thousand place digit as a character
 1ac:	ce 01       	movw	r24, r28
 1ae:	b5 01       	movw	r22, r10
 1b0:	0e 94 0f 01 	call	0x21e	; 0x21e <__divmodhi4>
 1b4:	cb 01       	movw	r24, r22
 1b6:	b8 01       	movw	r22, r16
 1b8:	0e 94 0f 01 	call	0x21e	; 0x21e <__divmodhi4>
 1bc:	80 5d       	subi	r24, 0xD0	; 208
 1be:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
            USART_SEND((temp/1000)%10+48);  // send huns place digit as a character
 1c2:	ce 01       	movw	r24, r28
 1c4:	b6 01       	movw	r22, r12
 1c6:	0e 94 0f 01 	call	0x21e	; 0x21e <__divmodhi4>
 1ca:	cb 01       	movw	r24, r22
 1cc:	b8 01       	movw	r22, r16
 1ce:	0e 94 0f 01 	call	0x21e	; 0x21e <__divmodhi4>
 1d2:	80 5d       	subi	r24, 0xD0	; 208
 1d4:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
            USART_SEND((temp/100)%10+48);   // send tens place digit as a character
 1d8:	ce 01       	movw	r24, r28
 1da:	b4 01       	movw	r22, r8
 1dc:	0e 94 0f 01 	call	0x21e	; 0x21e <__divmodhi4>
 1e0:	cb 01       	movw	r24, r22
 1e2:	b8 01       	movw	r22, r16
 1e4:	0e 94 0f 01 	call	0x21e	; 0x21e <__divmodhi4>
 1e8:	80 5d       	subi	r24, 0xD0	; 208
 1ea:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
            USART_SEND((temp/10)%10+48);    // send ones place digit as a character
 1ee:	ce 01       	movw	r24, r28
 1f0:	b8 01       	movw	r22, r16
 1f2:	0e 94 0f 01 	call	0x21e	; 0x21e <__divmodhi4>
 1f6:	c8 2f       	mov	r28, r24
 1f8:	cb 01       	movw	r24, r22
 1fa:	b8 01       	movw	r22, r16
 1fc:	0e 94 0f 01 	call	0x21e	; 0x21e <__divmodhi4>
 200:	80 5d       	subi	r24, 0xD0	; 208
 202:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
            USART_SEND(46);                 // send a decimal point: "."
 206:	8e e2       	ldi	r24, 0x2E	; 46
 208:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
            USART_SEND(temp%10+48);         // send tenths place digit as a character
 20c:	80 e3       	ldi	r24, 0x30	; 48
 20e:	8c 0f       	add	r24, r28
 210:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
            USART_SEND(10);             // send a newline
 214:	8a e0       	ldi	r24, 0x0A	; 10
 216:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
             
        }
            TIFR1 |= (1<<OCF1A);
 21a:	b1 9a       	sbi	0x16, 1	; 22
             
    } 
 21c:	98 cf       	rjmp	.-208    	; 0x14e <main+0x7e>

0000021e <__divmodhi4>:
 21e:	97 fb       	bst	r25, 7
 220:	07 2e       	mov	r0, r23
 222:	16 f4       	brtc	.+4      	; 0x228 <__divmodhi4+0xa>
 224:	00 94       	com	r0
 226:	07 d0       	rcall	.+14     	; 0x236 <__divmodhi4_neg1>
 228:	77 fd       	sbrc	r23, 7
 22a:	09 d0       	rcall	.+18     	; 0x23e <__divmodhi4_neg2>
 22c:	0e 94 23 01 	call	0x246	; 0x246 <__udivmodhi4>
 230:	07 fc       	sbrc	r0, 7
 232:	05 d0       	rcall	.+10     	; 0x23e <__divmodhi4_neg2>
 234:	3e f4       	brtc	.+14     	; 0x244 <__divmodhi4_exit>

00000236 <__divmodhi4_neg1>:
 236:	90 95       	com	r25
 238:	81 95       	neg	r24
 23a:	9f 4f       	sbci	r25, 0xFF	; 255
 23c:	08 95       	ret

0000023e <__divmodhi4_neg2>:
 23e:	70 95       	com	r23
 240:	61 95       	neg	r22
 242:	7f 4f       	sbci	r23, 0xFF	; 255

00000244 <__divmodhi4_exit>:
 244:	08 95       	ret

00000246 <__udivmodhi4>:
 246:	aa 1b       	sub	r26, r26
 248:	bb 1b       	sub	r27, r27
 24a:	51 e1       	ldi	r21, 0x11	; 17
 24c:	07 c0       	rjmp	.+14     	; 0x25c <__udivmodhi4_ep>

0000024e <__udivmodhi4_loop>:
 24e:	aa 1f       	adc	r26, r26
 250:	bb 1f       	adc	r27, r27
 252:	a6 17       	cp	r26, r22
 254:	b7 07       	cpc	r27, r23
 256:	10 f0       	brcs	.+4      	; 0x25c <__udivmodhi4_ep>
 258:	a6 1b       	sub	r26, r22
 25a:	b7 0b       	sbc	r27, r23

0000025c <__udivmodhi4_ep>:
 25c:	88 1f       	adc	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	5a 95       	dec	r21
 262:	a9 f7       	brne	.-22     	; 0x24e <__udivmodhi4_loop>
 264:	80 95       	com	r24
 266:	90 95       	com	r25
 268:	bc 01       	movw	r22, r24
 26a:	cd 01       	movw	r24, r26
 26c:	08 95       	ret

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
