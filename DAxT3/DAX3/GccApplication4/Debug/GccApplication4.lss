
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000810  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071e  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031f  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d5  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000039  00000000  00000000  00001931  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  78:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_INIT>:

void USART_INIT(void) 
{ 
	// This function sets up the microcontroller for serial communication
	// The baud rate, registers, and prescaler value are all set.
	UBRR0H = (uint8_t)(BAUD_PRESCALER>>8); 
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALER); 
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);  
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  96:	08 95       	ret

00000098 <USART_SEND>:
} 

void USART_SEND(unsigned char data)  
{ 
	// This function sends a single character from the ATmega328P to the computer.
	while(!(UCSR0A&(1<<UDRE0))); 
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	95 ff       	sbrs	r25, 5
  a0:	fd cf       	rjmp	.-6      	; 0x9c <USART_SEND+0x4>
	UDR0=data; 
  a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a6:	08 95       	ret

000000a8 <ReadADC>:


uint16_t ReadADC(uint8_t ADCchannel) 
{ 
	// This function reads and returns the ADC value from a specified input pin
	ADMUX = (ADMUX&0xF0)|(ADCchannel&0x0F); // select ADC channel with safety mask
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	90 81       	ld	r25, Z
  ae:	90 7f       	andi	r25, 0xF0	; 240
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	89 2b       	or	r24, r25
  b4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);  // single conversion mode
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	while( ADCSRA & (1<<ADSC));// wait until ADC conversion is complete
  c0:	80 81       	ld	r24, Z
  c2:	86 fd       	sbrc	r24, 6
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <ReadADC+0x18>
	return ADC; 
  c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  ce:	08 95       	ret

000000d0 <main>:


int main(void) 
{ 
	ADMUX |= (1<<REFS0); // select Vref=AVcc
  d0:	ec e7       	ldi	r30, 0x7C	; 124
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);   // set prescaler to 8 and enable ADC
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	83 68       	ori	r24, 0x83	; 131
  e2:	80 83       	st	Z, r24
	
	USART_INIT();  // Call the USART initialization code
  e4:	0e 94 40 00 	call	0x80	; 0x80 <USART_INIT>
		USART_SEND(46);
		
		int temp = ReadADC(0)*5;// read the ADC value and perform conversion to temperature
		// the LM34 temperature conversion is 10mV/1 degree Farenheit
		// temperature = (ADC*5000mV)/1024 = ~5*ADC
		USART_SEND((temp/100)%10+48);	// send tens place digit as a character
  e8:	0f 2e       	mov	r0, r31
  ea:	f4 e6       	ldi	r31, 0x64	; 100
  ec:	ef 2e       	mov	r14, r31
  ee:	f1 2c       	mov	r15, r1
  f0:	f0 2d       	mov	r31, r0
  f2:	0a e0       	ldi	r16, 0x0A	; 10
  f4:	10 e0       	ldi	r17, 0x00	; 0
	ADCSRA |= (1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);   // set prescaler to 8 and enable ADC
	
	USART_INIT();  // Call the USART initialization code
	while(1) 
	{ 
		USART_SEND(46);
  f6:	8e e2       	ldi	r24, 0x2E	; 46
  f8:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
		
		int temp = ReadADC(0)*5;// read the ADC value and perform conversion to temperature
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 54 00 	call	0xa8	; 0xa8 <ReadADC>
 102:	ec 01       	movw	r28, r24
 104:	cc 0f       	add	r28, r28
 106:	dd 1f       	adc	r29, r29
 108:	cc 0f       	add	r28, r28
 10a:	dd 1f       	adc	r29, r29
 10c:	c8 0f       	add	r28, r24
 10e:	d9 1f       	adc	r29, r25
		// the LM34 temperature conversion is 10mV/1 degree Farenheit
		// temperature = (ADC*5000mV)/1024 = ~5*ADC
		USART_SEND((temp/100)%10+48);	// send tens place digit as a character
 110:	ce 01       	movw	r24, r28
 112:	b7 01       	movw	r22, r14
 114:	0e 94 b3 00 	call	0x166	; 0x166 <__divmodhi4>
 118:	cb 01       	movw	r24, r22
 11a:	b8 01       	movw	r22, r16
 11c:	0e 94 b3 00 	call	0x166	; 0x166 <__divmodhi4>
 120:	80 5d       	subi	r24, 0xD0	; 208
 122:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
		//_delay_ms(100);
		USART_SEND((temp/10)%10+48);	// send ones place digit as a character
 126:	ce 01       	movw	r24, r28
 128:	b8 01       	movw	r22, r16
 12a:	0e 94 b3 00 	call	0x166	; 0x166 <__divmodhi4>
 12e:	c8 2f       	mov	r28, r24
 130:	cb 01       	movw	r24, r22
 132:	b8 01       	movw	r22, r16
 134:	0e 94 b3 00 	call	0x166	; 0x166 <__divmodhi4>
 138:	80 5d       	subi	r24, 0xD0	; 208
 13a:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
		//_delay_ms(100); 
		USART_SEND(46);					// send a decimal point: "."
 13e:	8e e2       	ldi	r24, 0x2E	; 46
 140:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
		//_delay_ms(100); 
		USART_SEND(temp%10+48);			// send tenths place digit as a character
 144:	80 e3       	ldi	r24, 0x30	; 48
 146:	8c 0f       	add	r24, r28
 148:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
		//_delay_ms(100); 
		USART_SEND(10);				// send a newline
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	0e 94 4c 00 	call	0x98	; 0x98 <USART_SEND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	89 e6       	ldi	r24, 0x69	; 105
 156:	98 e1       	ldi	r25, 0x18	; 24
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x88>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x92>
 162:	00 00       	nop
 164:	c8 cf       	rjmp	.-112    	; 0xf6 <main+0x26>

00000166 <__divmodhi4>:
 166:	97 fb       	bst	r25, 7
 168:	07 2e       	mov	r0, r23
 16a:	16 f4       	brtc	.+4      	; 0x170 <__divmodhi4+0xa>
 16c:	00 94       	com	r0
 16e:	07 d0       	rcall	.+14     	; 0x17e <__divmodhi4_neg1>
 170:	77 fd       	sbrc	r23, 7
 172:	09 d0       	rcall	.+18     	; 0x186 <__divmodhi4_neg2>
 174:	0e 94 c7 00 	call	0x18e	; 0x18e <__udivmodhi4>
 178:	07 fc       	sbrc	r0, 7
 17a:	05 d0       	rcall	.+10     	; 0x186 <__divmodhi4_neg2>
 17c:	3e f4       	brtc	.+14     	; 0x18c <__divmodhi4_exit>

0000017e <__divmodhi4_neg1>:
 17e:	90 95       	com	r25
 180:	81 95       	neg	r24
 182:	9f 4f       	sbci	r25, 0xFF	; 255
 184:	08 95       	ret

00000186 <__divmodhi4_neg2>:
 186:	70 95       	com	r23
 188:	61 95       	neg	r22
 18a:	7f 4f       	sbci	r23, 0xFF	; 255

0000018c <__divmodhi4_exit>:
 18c:	08 95       	ret

0000018e <__udivmodhi4>:
 18e:	aa 1b       	sub	r26, r26
 190:	bb 1b       	sub	r27, r27
 192:	51 e1       	ldi	r21, 0x11	; 17
 194:	07 c0       	rjmp	.+14     	; 0x1a4 <__udivmodhi4_ep>

00000196 <__udivmodhi4_loop>:
 196:	aa 1f       	adc	r26, r26
 198:	bb 1f       	adc	r27, r27
 19a:	a6 17       	cp	r26, r22
 19c:	b7 07       	cpc	r27, r23
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <__udivmodhi4_ep>
 1a0:	a6 1b       	sub	r26, r22
 1a2:	b7 0b       	sbc	r27, r23

000001a4 <__udivmodhi4_ep>:
 1a4:	88 1f       	adc	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	5a 95       	dec	r21
 1aa:	a9 f7       	brne	.-22     	; 0x196 <__udivmodhi4_loop>
 1ac:	80 95       	com	r24
 1ae:	90 95       	com	r25
 1b0:	bc 01       	movw	r22, r24
 1b2:	cd 01       	movw	r24, r26
 1b4:	08 95       	ret

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
